import React, { useState, useEffect } from 'react';
import './App.css';
import OfflineIndicator from './components/OfflineIndicator';
import InstallPrompt from './components/InstallPrompt';
import useServiceWorker from './hooks/useServiceWorker';

// Sample Content Data - Easy to modify!
const SAMPLE_CONTENT = {
  en: {
    siteName: "Coding Guide",
    subtitle: "Learn Computer Science the Fun Way!",
    tagline: "Empowering Grade 9 & 10 students with essential CS knowledge",
    startGrade9: "Start Grade 9",
    startGrade10: "Start Grade 10",
    about: "About",
    search: "Search lessons...",
    previous: "‚Üê Previous",
    next: "Next ‚Üí",
    downloadPdf: "üìÑ Download PDF",
    progressText: "Your Progress",
    darkMode: "üåô",
    lightMode: "‚òÄÔ∏è",
    grades: {
      grade9: {
        title: "Grade 9 Computer Science",
        topics: [
          {
            id: "intro",
            title: "üì± Introduction to Computers", 
            icon: "üíª",
            lessons: [
              {
                id: "what-is-computer",
                title: "What is a Computer?",
                content: `
                  <h2>What is a Computer? üñ•Ô∏è</h2>
                  <p>A computer is an electronic device that processes data according to a set of instructions called programs.</p>
                  
                  <h3>Key Characteristics:</h3>
                  <ul>
                    <li><strong>Speed:</strong> Computers can perform millions of calculations per second</li>
                    <li><strong>Accuracy:</strong> Computers rarely make mistakes when programmed correctly</li>
                    <li><strong>Storage:</strong> Can store vast amounts of information</li>
                    <li><strong>Automation:</strong> Can work without human intervention</li>
                  </ul>

                  <h3>Types of Computers:</h3>
                  <ol>
                    <li><strong>Personal Computers (PC)</strong> - Desktop and laptop computers</li>
                    <li><strong>Servers</strong> - Powerful computers that serve many users</li>
                    <li><strong>Supercomputers</strong> - Extremely fast computers for complex calculations</li>
                    <li><strong>Embedded Systems</strong> - Computers built into other devices</li>
                  </ol>

                  <div class="fun-fact">
                    üí° <strong>Fun Fact:</strong> The first computer ENIAC weighed 30 tons and took up an entire room!
                  </div>
                `
              },
              {
                id: "computer-history",
                title: "History of Computers",
                content: `
                  <h2>History of Computers üìö</h2>
                  <p>The evolution of computers spans several generations, each marked by significant technological advances.</p>

                  <h3>Computer Generations:</h3>
                  
                  <div class="generation">
                    <h4>üîπ First Generation (1940-1956): Vacuum Tubes</h4>
                    <ul>
                      <li>Used vacuum tubes for processing</li>
                      <li>Examples: ENIAC, UNIVAC</li>
                      <li>Very large and consumed lots of power</li>
                    </ul>
                  </div>

                  <div class="generation">
                    <h4>üîπ Second Generation (1956-1963): Transistors</h4>
                    <ul>
                      <li>Replaced vacuum tubes with transistors</li>
                      <li>Smaller, faster, and more reliable</li>
                      <li>Introduction of programming languages</li>
                    </ul>
                  </div>

                  <div class="generation">
                    <h4>üîπ Third Generation (1964-1971): Integrated Circuits</h4>
                    <ul>
                      <li>Multiple transistors on single chip</li>
                      <li>Much smaller and cheaper</li>
                      <li>Development of operating systems</li>
                    </ul>
                  </div>

                  <div class="generation">
                    <h4>üîπ Fourth Generation (1971-Present): Microprocessors</h4>
                    <ul>
                      <li>Entire CPU on a single chip</li>
                      <li>Personal computers become popular</li>
                      <li>Internet and mobile computing</li>
                    </ul>
                  </div>

                  <div class="timeline">
                    <h4>üïê Important Milestones:</h4>
                    <ul>
                      <li><strong>1975:</strong> First personal computer (Altair 8800)</li>
                      <li><strong>1981:</strong> IBM PC launched</li>
                      <li><strong>1991:</strong> World Wide Web created</li>
                      <li><strong>2007:</strong> First iPhone introduced</li>
                    </ul>
                  </div>
                `
              }
            ]
          },
          {
            id: "hardware",
            title: "üîß Computer Hardware",
            icon: "‚öôÔ∏è", 
            lessons: [
              {
                id: "input-devices",
                title: "Input Devices",
                content: `
                  <h2>Input Devices üéØ</h2>
                  <p>Input devices allow users to enter data and commands into a computer system.</p>

                  <h3>Common Input Devices:</h3>
                  
                  <div class="device-grid">
                    <div class="device">
                      <h4>‚å®Ô∏è Keyboard</h4>
                      <ul>
                        <li>Primary text input device</li>
                        <li>QWERTY layout most common</li>
                        <li>Special function keys (F1-F12)</li>
                      </ul>
                    </div>

                    <div class="device">
                      <h4>üñ±Ô∏è Mouse</h4>
                      <ul>
                        <li>Pointing device for navigation</li>
                        <li>Left click, right click, scroll wheel</li>
                        <li>Optical or laser technology</li>
                      </ul>
                    </div>

                    <div class="device">
                      <h4>üì± Touchscreen</h4>
                      <ul>
                        <li>Touch-sensitive display</li>
                        <li>Multi-touch gestures</li>
                        <li>Used in phones, tablets</li>
                      </ul>
                    </div>

                    <div class="device">
                      <h4>üé§ Microphone</h4>
                      <ul>
                        <li>Audio input device</li>
                        <li>Voice commands</li>
                        <li>Recording and communication</li>
                      </ul>
                    </div>
                  </div>

                  <h3>Modern Input Technologies:</h3>
                  <ul>
                    <li><strong>Voice Recognition:</strong> Siri, Alexa, Google Assistant</li>
                    <li><strong>Gesture Control:</strong> Motion sensors, hand tracking</li>
                    <li><strong>Eye Tracking:</strong> Control using eye movements</li>
                    <li><strong>Brain-Computer Interface:</strong> Direct neural control</li>
                  </ul>
                `
              },
              {
                id: "output-devices", 
                title: "Output Devices",
                content: `
                  <h2>Output Devices üì∫</h2>
                  <p>Output devices display or present information from the computer to users.</p>

                  <h3>Visual Output Devices:</h3>
                  
                  <div class="device-grid">
                    <div class="device">
                      <h4>üñ•Ô∏è Monitor</h4>
                      <ul>
                        <li>Primary visual output</li>
                        <li>LCD, LED, OLED technologies</li>
                        <li>Various resolutions: HD, 4K, 8K</li>
                      </ul>
                    </div>

                    <div class="device">
                      <h4>üìΩÔ∏è Projector</h4>
                      <ul>
                        <li>Large screen display</li>
                        <li>Presentations and movies</li>
                        <li>DLP or LCD technology</li>
                      </ul>
                    </div>
                  </div>

                  <h3>Audio Output Devices:</h3>
                  
                  <div class="device-grid">
                    <div class="device">
                      <h4>üîä Speakers</h4>
                      <ul>
                        <li>Convert electrical signals to sound</li>
                        <li>Built-in or external</li>
                        <li>Stereo or surround sound</li>
                      </ul>
                    </div>

                    <div class="device">
                      <h4>üéß Headphones</h4>
                      <ul>
                        <li>Personal audio output</li>
                        <li>Wired or wireless</li>
                        <li>Noise cancelling features</li>
                      </ul>
                    </div>
                  </div>

                  <h3>Physical Output Devices:</h3>
                  
                  <div class="device">
                    <h4>üñ®Ô∏è Printer</h4>
                    <ul>
                      <li><strong>Inkjet:</strong> Uses liquid ink cartridges</li>
                      <li><strong>Laser:</strong> Uses toner powder</li>
                      <li><strong>3D Printer:</strong> Creates physical objects</li>
                    </ul>
                  </div>

                  <div class="future-tech">
                    <h4>üöÄ Future Output Technologies:</h4>
                    <ul>
                      <li>Virtual Reality (VR) headsets</li>
                      <li>Augmented Reality (AR) displays</li>
                      <li>Holographic projections</li>
                      <li>Haptic feedback devices</li>
                    </ul>
                  </div>
                `
              }
            ]
          }
        ]
      },
      grade10: {
        title: "Grade 10 Computer Science",
        topics: [
          {
            id: "programming",
            title: "üíª Introduction to Programming",
            icon: "üêç",
            lessons: [
              {
                id: "what-is-programming",
                title: "What is Programming?",
                content: `
                  <h2>What is Programming? üë®‚Äçüíª</h2>
                  <p>Programming is the process of creating instructions for computers to solve problems and perform tasks.</p>

                  <h3>Key Concepts:</h3>
                  <ul>
                    <li><strong>Algorithm:</strong> Step-by-step solution to a problem</li>
                    <li><strong>Code:</strong> Instructions written in a programming language</li>
                    <li><strong>Program:</strong> Complete set of instructions</li>
                    <li><strong>Bug:</strong> Error in the code</li>
                    <li><strong>Debug:</strong> Process of finding and fixing bugs</li>
                  </ul>

                  <h3>Popular Programming Languages:</h3>
                  
                  <div class="language-grid">
                    <div class="language">
                      <h4>üêç Python</h4>
                      <p>Great for beginners, used in AI and web development</p>
                    </div>
                    
                    <div class="language">
                      <h4>‚òï Java</h4>
                      <p>Object-oriented, used in enterprise applications</p>
                    </div>
                    
                    <div class="language">
                      <h4>üåê JavaScript</h4>
                      <p>Essential for web development and interactivity</p>
                    </div>
                    
                    <div class="language">
                      <h4>‚ö° C++</h4>
                      <p>Fast and powerful, used in games and systems</p>
                    </div>
                  </div>

                  <h3>Programming Process:</h3>
                  <ol>
                    <li><strong>Problem Analysis:</strong> Understand what needs to be solved</li>
                    <li><strong>Algorithm Design:</strong> Plan the solution steps</li>
                    <li><strong>Coding:</strong> Write the program</li>
                    <li><strong>Testing:</strong> Check if it works correctly</li>
                    <li><strong>Debugging:</strong> Fix any errors</li>
                    <li><strong>Documentation:</strong> Explain how it works</li>
                  </ol>

                  <div class="code-example">
                    <h4>üéØ Simple Python Example:</h4>
                    <pre><code>
# This program greets the user
name = input("What's your name? ")
print(f"Hello, {name}! Welcome to programming!")
                    </code></pre>
                  </div>
                `
              },
              {
                id: "algorithms",
                title: "Algorithms and Flowcharts",
                content: `
                  <h2>Algorithms and Flowcharts üìä</h2>
                  <p>An algorithm is a step-by-step method for solving problems. Flowcharts visualize these steps.</p>

                  <h3>What is an Algorithm?</h3>
                  <ul>
                    <li>Finite sequence of well-defined instructions</li>
                    <li>Solves a specific problem</li>
                    <li>Must terminate after finite steps</li>
                    <li>Should be unambiguous and effective</li>
                  </ul>

                  <h3>Algorithm Example - Making Tea:</h3>
                  <ol>
                    <li>Boil water in a kettle</li>
                    <li>Add tea leaves to teapot</li>
                    <li>Pour hot water over tea leaves</li>
                    <li>Let it steep for 3-5 minutes</li>
                    <li>Strain tea into cup</li>
                    <li>Add sugar/milk if desired</li>
                    <li>Serve hot</li>
                  </ol>

                  <h3>Flowchart Symbols:</h3>
                  
                  <div class="symbol-grid">
                    <div class="symbol">
                      <h4>üîµ Oval</h4>
                      <p>Start/End</p>
                    </div>
                    
                    <div class="symbol">
                      <h4>üì¶ Rectangle</h4>
                      <p>Process/Action</p>
                    </div>
                    
                    <div class="symbol">
                      <h4>üíé Diamond</h4>
                      <p>Decision</p>
                    </div>
                    
                    <div class="symbol">
                      <h4>üì• Parallelogram</h4>
                      <p>Input/Output</p>
                    </div>
                  </div>

                  <h3>Algorithm for Finding Maximum of Two Numbers:</h3>
                  <ol>
                    <li>Start</li>
                    <li>Input first number (A)</li>
                    <li>Input second number (B)</li>
                    <li>If A > B, then Max = A</li>
                    <li>Else Max = B</li>
                    <li>Display Max</li>
                    <li>End</li>
                  </ol>

                  <div class="practice-box">
                    <h4>üéØ Practice Exercise:</h4>
                    <p>Try creating an algorithm and flowchart for:</p>
                    <ul>
                      <li>Calculating area of a rectangle</li>
                      <li>Checking if a number is even or odd</li>
                      <li>Finding the largest of three numbers</li>
                    </ul>
                  </div>
                `
              }
            ]
          }
        ]
      }
    }
  },
  np: {
    siteName: "‡§ï‡•ã‡§°‡§ø‡§ô ‡§ó‡§æ‡§á‡§°",
    subtitle: "‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞ ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§® ‡§Æ‡§ú‡§æ‡§≤‡•á ‡§∏‡§ø‡§ï‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç!",
    tagline: "‡§ï‡§ï‡•ç‡§∑‡§æ ‡•Ø ‡§∞ ‡•ß‡•¶ ‡§ï‡§æ ‡§µ‡§ø‡§¶‡•ç‡§Ø‡§æ‡§∞‡•ç‡§•‡•Ä‡§π‡§∞‡•Ç‡§≤‡§æ‡§à ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï CS ‡§ú‡•ç‡§û‡§æ‡§® ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ó‡§∞‡•ç‡§¶‡•à",
    startGrade9: "‡§ï‡§ï‡•ç‡§∑‡§æ ‡•Ø ‡§∏‡•Å‡§∞‡•Å ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç",
    startGrade10: "‡§ï‡§ï‡•ç‡§∑‡§æ ‡•ß‡•¶ ‡§∏‡•Å‡§∞‡•Å ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç",
    about: "‡§¨‡§æ‡§∞‡•á‡§Æ‡§æ",
    search: "‡§™‡§æ‡§†‡§π‡§∞‡•Ç ‡§ñ‡•ã‡§ú‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç...",
    previous: "‚Üê ‡§Ö‡§ò‡§ø‡§≤‡•ç‡§≤‡•ã",
    next: "‡§Ö‡§∞‡•ç‡§ï‡•ã ‚Üí",
    downloadPdf: "üìÑ PDF ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§°",
    progressText: "‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§™‡•ç‡§∞‡§ó‡§§‡§ø",
    darkMode: "üåô",
    lightMode: "‚òÄÔ∏è",
    grades: {
      grade9: {
        title: "‡§ï‡§ï‡•ç‡§∑‡§æ ‡•Ø ‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞ ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§®",
        topics: [
          {
            id: "intro",
            title: "üì± ‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞‡§ï‡•ã ‡§™‡§∞‡§ø‡§ö‡§Ø", 
            icon: "üíª",
            lessons: [
              {
                id: "what-is-computer",
                title: "‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞ ‡§ï‡•á ‡§π‡•ã?",
                content: `
                  <h2>‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞ ‡§ï‡•á ‡§π‡•ã? üñ•Ô∏è</h2>
                  <p>‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞ ‡§è‡§ï ‡§á‡§≤‡•á‡§ï‡•ç‡§ü‡•ç‡§∞‡•ã‡§®‡§ø‡§ï ‡§â‡§™‡§ï‡§∞‡§£ ‡§π‡•ã ‡§ú‡§∏‡§≤‡•á ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§≠‡§®‡§ø‡§®‡•á ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡§®‡§π‡§∞‡•Ç ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§°‡§æ‡§ü‡§æ ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ó‡§∞‡•ç‡§õ‡•§</p>
                  
                  <h3>‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§π‡§∞‡•Ç:</h3>
                  <ul>
                    <li><strong>‡§ó‡§§‡§ø:</strong> ‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞‡§≤‡•á ‡§™‡•ç‡§∞‡§§‡§ø ‡§∏‡•á‡§ï‡•á‡§®‡•ç‡§° ‡§≤‡§æ‡§ñ‡•å‡§Ç ‡§ó‡§£‡§®‡§æ ‡§ó‡§∞‡•ç‡§® ‡§∏‡§ï‡•ç‡§õ</li>
                    <li><strong>‡§∂‡•Å‡§¶‡•ç‡§ß‡§§‡§æ:</strong> ‡§∏‡§π‡•Ä ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§ó‡§∞‡•ç‡§¶‡§æ ‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞‡§≤‡•á ‡§µ‡§ø‡§∞‡§≤‡•à ‡§ó‡§≤‡•ç‡§§‡•Ä ‡§ó‡§∞‡•ç‡§õ</li>
                    <li><strong>‡§≠‡§£‡•ç‡§°‡§æ‡§∞‡§£:</strong> ‡§†‡•Ç‡§≤‡•ã ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ‡§Æ‡§æ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≠‡§£‡•ç‡§°‡§æ‡§∞‡§£ ‡§ó‡§∞‡•ç‡§® ‡§∏‡§ï‡•ç‡§õ</li>
                    <li><strong>‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§®:</strong> ‡§Æ‡§æ‡§®‡§µ ‡§π‡§∏‡•ç‡§§‡§ï‡•ç‡§∑‡•á‡§™ ‡§¨‡§ø‡§®‡§æ ‡§ï‡§æ‡§Æ ‡§ó‡§∞‡•ç‡§® ‡§∏‡§ï‡•ç‡§õ</li>
                  </ul>

                  <h3>‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞‡§π‡§∞‡•Ç:</h3>
                  <ol>
                    <li><strong>‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞ (PC)</strong> - ‡§°‡•á‡§∏‡•ç‡§ï‡§ü‡§™ ‡§∞ ‡§≤‡•ç‡§Ø‡§æ‡§™‡§ü‡§™ ‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞</li>
                    <li><strong>‡§∏‡§∞‡•ç‡§≠‡§∞</strong> - ‡§ß‡•á‡§∞‡•à ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ‡§π‡§∞‡•Ç‡§≤‡§æ‡§à ‡§∏‡•á‡§µ‡§æ ‡§¶‡§ø‡§®‡•á ‡§∂‡§ï‡•ç‡§§‡§ø‡§∂‡§æ‡§≤‡•Ä ‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞</li>
                    <li><strong>‡§∏‡•Å‡§™‡§∞‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞</strong> - ‡§ú‡§ü‡§ø‡§≤ ‡§ó‡§£‡§®‡§æ‡§ï‡§æ ‡§≤‡§æ‡§ó‡§ø ‡§Ö‡§§‡•ç‡§Ø‡§®‡•ç‡§§ ‡§§‡•Ä‡§µ‡•ç‡§∞ ‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞</li>
                    <li><strong>‡§è‡§Æ‡•ç‡§¨‡•á‡§°‡•á‡§° ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ</strong> - ‡§Ö‡§®‡•ç‡§Ø ‡§â‡§™‡§ï‡§∞‡§£‡§π‡§∞‡•Ç‡§Æ‡§æ ‡§®‡§ø‡§∞‡•ç‡§Æ‡§ø‡§§ ‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞</li>
                  </ol>

                  <div class="fun-fact">
                    üí° <strong>‡§∞‡•ã‡§ö‡§ï ‡§§‡§•‡•ç‡§Ø:</strong> ‡§™‡§π‡§ø‡§≤‡•ã ‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞ ENIAC ‡§ï‡•ã ‡§§‡•å‡§≤ ‡•©‡•¶ ‡§ü‡§® ‡§•‡§ø‡§Ø‡•ã ‡§∞ ‡§™‡•Ç‡§∞‡•à ‡§ï‡•ã‡§†‡§æ ‡§ò‡•á‡§∞‡•ç‡§•‡•á!
                  </div>
                `
              },
              {
                id: "computer-history",
                title: "‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞‡§ï‡•ã ‡§á‡§§‡§ø‡§π‡§æ‡§∏",
                content: `
                  <h2>‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞‡§ï‡•ã ‡§á‡§§‡§ø‡§π‡§æ‡§∏ üìö</h2>
                  <p>‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞‡§ï‡•ã ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§ß‡•á‡§∞‡•à ‡§™‡•Å‡§∏‡•ç‡§§‡§æ‡§π‡§∞‡•Ç‡§Æ‡§æ ‡§´‡•à‡§≤‡§ø‡§è‡§ï‡•ã ‡§õ, ‡§π‡§∞‡•á‡§ï ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§™‡•ç‡§∞‡§æ‡§µ‡§ø‡§ß‡§ø‡§ï ‡§™‡•ç‡§∞‡§ó‡§§‡§ø‡§≤‡•á ‡§ö‡§ø‡§π‡•ç‡§®‡§ø‡§§‡•§</p>

                  <h3>‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞ ‡§™‡•Å‡§∏‡•ç‡§§‡§æ‡§π‡§∞‡•Ç:</h3>
                  
                  <div class="generation">
                    <h4>üîπ ‡§™‡§π‡§ø‡§≤‡•ã ‡§™‡•Å‡§∏‡•ç‡§§‡§æ (‡•ß‡•Ø‡•™‡•¶-‡•ß‡•Ø‡•´‡•¨): ‡§≠‡•ç‡§Ø‡§æ‡§ï‡•Å‡§Æ ‡§ü‡•ç‡§Ø‡•Å‡§¨</h4>
                    <ul>
                      <li>‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§ï‡§æ ‡§≤‡§æ‡§ó‡§ø ‡§≠‡•ç‡§Ø‡§æ‡§ï‡•Å‡§Æ ‡§ü‡•ç‡§Ø‡•Å‡§¨ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó</li>
                      <li>‡§â‡§¶‡§æ‡§π‡§∞‡§£: ENIAC, UNIVAC</li>
                      <li>‡§ß‡•á‡§∞‡•à ‡§†‡•Ç‡§≤‡•ã ‡§∞ ‡§ß‡•á‡§∞‡•à ‡§™‡§æ‡§µ‡§∞ ‡§ñ‡§™‡§§</li>
                    </ul>
                  </div>

                  <div class="generation">
                    <h4>üîπ ‡§¶‡•ã‡§∏‡•ç‡§∞‡•ã ‡§™‡•Å‡§∏‡•ç‡§§‡§æ (‡•ß‡•Ø‡•´‡•¨-‡•ß‡•Ø‡•¨‡•©): ‡§ü‡•ç‡§∞‡§æ‡§®‡•ç‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞</h4>
                    <ul>
                      <li>‡§≠‡•ç‡§Ø‡§æ‡§ï‡•Å‡§Æ ‡§ü‡•ç‡§Ø‡•Å‡§¨‡§≤‡§æ‡§à ‡§ü‡•ç‡§∞‡§æ‡§®‡•ç‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞‡§≤‡•á ‡§™‡•ç‡§∞‡§§‡§ø‡§∏‡•ç‡§•‡§æ‡§™‡§®</li>
                      <li>‡§∏‡§æ‡§®‡•ã, ‡§õ‡§ø‡§ü‡•ã ‡§∞ ‡§Ö‡§ß‡§ø‡§ï ‡§≠‡§∞‡§™‡§∞‡•ç‡§¶‡•ã</li>
                      <li>‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ‡§ø‡§ô ‡§≠‡§æ‡§∑‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã ‡§™‡§∞‡§ø‡§ö‡§Ø</li>
                    </ul>
                  </div>

                  <div class="generation">
                    <h4>üîπ ‡§§‡•á‡§∏‡•ç‡§∞‡•ã ‡§™‡•Å‡§∏‡•ç‡§§‡§æ (‡•ß‡•Ø‡•¨‡•™-‡•ß‡•Ø‡•≠‡•ß): ‡§è‡§ï‡•Ä‡§ï‡•É‡§§ ‡§∏‡§∞‡•ç‡§ï‡§ø‡§ü</h4>
                    <ul>
                      <li>‡§è‡§ï‡§≤ ‡§ö‡§ø‡§™‡§Æ‡§æ ‡§ß‡•á‡§∞‡•à ‡§ü‡•ç‡§∞‡§æ‡§®‡•ç‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞</li>
                      <li>‡§ß‡•á‡§∞‡•à ‡§∏‡§æ‡§®‡•ã ‡§∞ ‡§∏‡§∏‡•ç‡§§‡•ã</li>
                      <li>‡§Ö‡§™‡§∞‡•á‡§ü‡§ø‡§ô ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ‡§ï‡•ã ‡§µ‡§ø‡§ï‡§æ‡§∏</li>
                    </ul>
                  </div>

                  <div class="generation">
                    <h4>üîπ ‡§ö‡•å‡§•‡•ã ‡§™‡•Å‡§∏‡•ç‡§§‡§æ (‡•ß‡•Ø‡•≠‡•ß-‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§®): ‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏‡§∞</h4>
                    <ul>
                      <li>‡§è‡§ï‡§≤ ‡§ö‡§ø‡§™‡§Æ‡§æ ‡§∏‡§Æ‡•ç‡§™‡•Ç‡§∞‡•ç‡§£ CPU</li>
                      <li>‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞ ‡§≤‡•ã‡§ï‡§™‡•ç‡§∞‡§ø‡§Ø ‡§≠‡§Ø‡•ã</li>
                      <li>‡§á‡§®‡•ç‡§ü‡§∞‡§®‡•á‡§ü ‡§∞ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§ø‡§ô</li>
                    </ul>
                  </div>

                  <div class="timeline">
                    <h4>üïê ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§Æ‡§æ‡§á‡§≤‡§∏‡•ç‡§ü‡•ã‡§®‡§π‡§∞‡•Ç:</h4>
                    <ul>
                      <li><strong>‡•ß‡•Ø‡•≠‡•´:</strong> ‡§™‡§π‡§ø‡§≤‡•ã ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞ (Altair 8800)</li>
                      <li><strong>‡•ß‡•Ø‡•Æ‡•ß:</strong> IBM PC ‡§≤‡§®‡•ç‡§ö</li>
                      <li><strong>‡•ß‡•Ø‡•Ø‡•ß:</strong> ‡§µ‡§∞‡•ç‡§≤‡•ç‡§° ‡§µ‡§æ‡§á‡§° ‡§µ‡•á‡§¨ ‡§∏‡§ø‡§∞‡•ç‡§ú‡§®‡§æ</li>
                      <li><strong>‡•®‡•¶‡•¶‡•≠:</strong> ‡§™‡§π‡§ø‡§≤‡•ã iPhone ‡§™‡§∞‡§ø‡§ö‡§Ø</li>
                    </ul>
                  </div>
                `
              }
            ]
          },
          {
            id: "hardware",
            title: "üîß ‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞ ‡§π‡§æ‡§∞‡•ç‡§°‡§µ‡•á‡§Ø‡§∞",
            icon: "‚öôÔ∏è", 
            lessons: [
              {
                id: "input-devices",
                title: "‡§á‡§®‡§™‡•Å‡§ü ‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡§π‡§∞‡•Ç",
                content: `
                  <h2>‡§á‡§®‡§™‡•Å‡§ü ‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡§π‡§∞‡•Ç üéØ</h2>
                  <p>‡§á‡§®‡§™‡•Å‡§ü ‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡§π‡§∞‡•Ç‡§≤‡•á ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ‡§π‡§∞‡•Ç‡§≤‡§æ‡§à ‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞ ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä‡§Æ‡§æ ‡§°‡§æ‡§ü‡§æ ‡§∞ ‡§Ü‡§¶‡•á‡§∂‡§π‡§∞‡•Ç ‡§™‡•ç‡§∞‡§µ‡§ø‡§∑‡•ç‡§ü ‡§ó‡§∞‡•ç‡§® ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡§ø‡§®‡•ç‡§õ‡•§</p>

                  <h3>‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§á‡§®‡§™‡•Å‡§ü ‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡§π‡§∞‡•Ç:</h3>
                  
                  <div class="device-grid">
                    <div class="device">
                      <h4>‚å®Ô∏è ‡§ï‡§ø‡§¨‡•ã‡§∞‡•ç‡§°</h4>
                      <ul>
                        <li>‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§™‡§æ‡§† ‡§á‡§®‡§™‡•Å‡§ü ‡§Ø‡§®‡•ç‡§§‡•ç‡§∞</li>
                        <li>QWERTY ‡§≤‡•á‡§Ü‡§â‡§ü ‡§∏‡§¨‡•à‡§≠‡§®‡•ç‡§¶‡§æ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø</li>
                        <li>‡§µ‡§ø‡§∂‡•á‡§∑ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡•Å‡§û‡•ç‡§ú‡•Ä‡§π‡§∞‡•Ç (F1-F12)</li>
                      </ul>
                    </div>

                    <div class="device">
                      <h4>üñ±Ô∏è ‡§Æ‡§æ‡§â‡§∏</h4>
                      <ul>
                        <li>‡§®‡•á‡§≠‡§ø‡§ó‡•á‡§∏‡§®‡§ï‡§æ ‡§≤‡§æ‡§ó‡§ø ‡§™‡•ã‡§á‡§®‡•ç‡§ü‡§ø‡§ô ‡§Ø‡§®‡•ç‡§§‡•ç‡§∞</li>
                        <li>‡§¨‡§æ‡§Ø‡§æ‡§Å ‡§ï‡•ç‡§≤‡§ø‡§ï, ‡§¶‡§æ‡§Ø‡§æ‡§Å ‡§ï‡•ç‡§≤‡§ø‡§ï, ‡§∏‡•ç‡§ï‡•ç‡§∞‡•ã‡§≤ ‡§π‡•ç‡§µ‡•Ä‡§≤</li>
                        <li>‡§Ö‡§™‡•ç‡§ü‡§ø‡§ï‡§≤ ‡§µ‡§æ ‡§≤‡•á‡§ú‡§∞ ‡§™‡•ç‡§∞‡§µ‡§ø‡§ß‡§ø</li>
                      </ul>
                    </div>

                    <div class="device">
                      <h4>üì± ‡§ü‡§ö‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§®</h4>
                      <ul>
                        <li>‡§∏‡•ç‡§™‡§∞‡•ç‡§∂-‡§∏‡§Ç‡§µ‡•á‡§¶‡§®‡§∂‡•Ä‡§≤ ‡§°‡§ø‡§∏‡•ç‡§™‡•ç‡§≤‡•á</li>
                        <li>‡§Æ‡§≤‡•ç‡§ü‡§ø-‡§ü‡§ö ‡§á‡§∂‡§æ‡§∞‡§æ‡§π‡§∞‡•Ç</li>
                        <li>‡§´‡•ã‡§®, ‡§ü‡•ç‡§Ø‡§æ‡§¨‡•ç‡§≤‡•á‡§ü‡§Æ‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó</li>
                      </ul>
                    </div>

                    <div class="device">
                      <h4>üé§ ‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã‡§´‡•ã‡§®</h4>
                      <ul>
                        <li>‡§Ö‡§°‡§ø‡§Ø‡•ã ‡§á‡§®‡§™‡•Å‡§ü ‡§Ø‡§®‡•ç‡§§‡•ç‡§∞</li>
                        <li>‡§Ü‡§µ‡§æ‡§ú ‡§Ü‡§¶‡•á‡§∂‡§π‡§∞‡•Ç</li>
                        <li>‡§∞‡•á‡§ï‡§∞‡•ç‡§°‡§ø‡§ô ‡§∞ ‡§∏‡§Ç‡§ö‡§æ‡§∞</li>
                      </ul>
                    </div>
                  </div>

                  <h3>‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§á‡§®‡§™‡•Å‡§ü ‡§™‡•ç‡§∞‡§µ‡§ø‡§ß‡§ø‡§π‡§∞‡•Ç:</h3>
                  <ul>
                    <li><strong>‡§Ü‡§µ‡§æ‡§ú ‡§™‡§π‡§ø‡§ö‡§æ‡§®:</strong> Siri, Alexa, Google Assistant</li>
                    <li><strong>‡§á‡§∂‡§æ‡§∞‡§æ ‡§®‡§ø‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡§£:</strong> ‡§ó‡§§‡§ø ‡§∏‡•á‡§®‡•ç‡§∏‡§∞, ‡§π‡§æ‡§§ ‡§ü‡•ç‡§∞‡•ç‡§Ø‡§æ‡§ï‡§ø‡§ô</li>
                    <li><strong>‡§Ü‡§Å‡§ñ‡§æ ‡§ü‡•ç‡§∞‡•ç‡§Ø‡§æ‡§ï‡§ø‡§ô:</strong> ‡§Ü‡§Å‡§ñ‡§æ‡§ï‡•ã ‡§ö‡§æ‡§≤‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§®‡§ø‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡§£</li>
                    <li><strong>‡§Æ‡§∏‡•ç‡§§‡§ø‡§∑‡•ç‡§ï-‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞ ‡§á‡§®‡•ç‡§ü‡§∞‡§´‡•á‡§∏:</strong> ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡§ï‡•ç‡§∑ ‡§®‡•ç‡§Ø‡•Ç‡§∞‡§≤ ‡§®‡§ø‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡§£</li>
                  </ul>
                `
              },
              {
                id: "output-devices", 
                title: "‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡§π‡§∞‡•Ç",
                content: `
                  <h2>‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡§π‡§∞‡•Ç üì∫</h2>
                  <p>‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡§π‡§∞‡•Ç‡§≤‡•á ‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞‡§¨‡§æ‡§ü ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ‡§π‡§∞‡•Ç‡§≤‡§æ‡§à ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§µ‡§æ ‡§™‡•ç‡§∞‡§∏‡•ç‡§§‡•Å‡§§ ‡§ó‡§∞‡•ç‡§õ‡§®‡•ç‡•§</p>

                  <h3>‡§¶‡•É‡§∂‡•ç‡§Ø ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡§π‡§∞‡•Ç:</h3>
                  
                  <div class="device-grid">
                    <div class="device">
                      <h4>üñ•Ô∏è ‡§Æ‡§®‡§ø‡§ü‡§∞</h4>
                      <ul>
                        <li>‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§¶‡•É‡§∂‡•ç‡§Ø ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü</li>
                        <li>LCD, LED, OLED ‡§™‡•ç‡§∞‡§µ‡§ø‡§ß‡§ø‡§π‡§∞‡•Ç</li>
                        <li>‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§∞‡§ø‡§ú‡•ã‡§≤‡•ç‡§Ø‡•Å‡§∏‡§®‡§π‡§∞‡•Ç: HD, 4K, 8K</li>
                      </ul>
                    </div>

                    <div class="device">
                      <h4>üìΩÔ∏è ‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü‡§∞</h4>
                      <ul>
                        <li>‡§†‡•Ç‡§≤‡•ã ‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§® ‡§°‡§ø‡§∏‡•ç‡§™‡•ç‡§≤‡•á</li>
                        <li>‡§™‡•ç‡§∞‡§∏‡•ç‡§§‡•Å‡§§‡•Ä‡§ï‡§∞‡§£ ‡§∞ ‡§ö‡§≤‡§ö‡§ø‡§§‡•ç‡§∞</li>
                        <li>DLP ‡§µ‡§æ LCD ‡§™‡•ç‡§∞‡§µ‡§ø‡§ß‡§ø</li>
                      </ul>
                    </div>
                  </div>

                  <h3>‡§Ö‡§°‡§ø‡§Ø‡•ã ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡§π‡§∞‡•Ç:</h3>
                  
                  <div class="device-grid">
                    <div class="device">
                      <h4>üîä ‡§∏‡•ç‡§™‡§ø‡§ï‡§∞</h4>
                      <ul>
                        <li>‡§µ‡§ø‡§¶‡•ç‡§Ø‡•Å‡§§‡•Ä‡§Ø ‡§∏‡§Ç‡§ï‡•á‡§§‡§≤‡§æ‡§à ‡§Ü‡§µ‡§æ‡§ú‡§Æ‡§æ ‡§∞‡•Ç‡§™‡§æ‡§®‡•ç‡§§‡§∞‡§£</li>
                        <li>‡§≠‡§ø‡§§‡•ç‡§∞‡•Ä ‡§µ‡§æ ‡§¨‡§æ‡§π‡§ø‡§∞‡•Ä</li>
                        <li>‡§∏‡•ç‡§ü‡•á‡§∞‡§ø‡§Ø‡•ã ‡§µ‡§æ ‡§µ‡§∞‡§™‡§∞‡§ï‡•ã ‡§Ü‡§µ‡§æ‡§ú</li>
                      </ul>
                    </div>

                    <div class="device">
                      <h4>üéß ‡§π‡•á‡§°‡§´‡•ã‡§®</h4>
                      <ul>
                        <li>‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§Ö‡§°‡§ø‡§Ø‡•ã ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü</li>
                        <li>‡§§‡§æ‡§∞‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§µ‡§æ ‡§§‡§æ‡§∞‡§∞‡§π‡§ø‡§§</li>
                        <li>‡§Ü‡§µ‡§æ‡§ú ‡§∞‡§¶‡•ç‡§¶ ‡§ó‡§∞‡•ç‡§®‡•á ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§π‡§∞‡•Ç</li>
                      </ul>
                    </div>
                  </div>

                  <h3>‡§≠‡•å‡§§‡§ø‡§ï ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡§π‡§∞‡•Ç:</h3>
                  
                  <div class="device">
                    <h4>üñ®Ô∏è ‡§™‡•ç‡§∞‡§ø‡§®‡•ç‡§ü‡§∞</h4>
                    <ul>
                      <li><strong>‡§á‡§®‡•ç‡§ï‡§ú‡•á‡§ü:</strong> ‡§§‡§∞‡§≤ ‡§Æ‡§∏‡•Ä ‡§ï‡§æ‡§∞‡•ç‡§ü‡•ç‡§∞‡§ø‡§ú ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó</li>
                      <li><strong>‡§≤‡•á‡§ú‡§∞:</strong> ‡§ü‡•ã‡§®‡§∞ ‡§™‡§æ‡§â‡§°‡§∞ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó</li>
                      <li><strong>3D ‡§™‡•ç‡§∞‡§ø‡§®‡•ç‡§ü‡§∞:</strong> ‡§≠‡•å‡§§‡§ø‡§ï ‡§µ‡§∏‡•ç‡§§‡•Å‡§π‡§∞‡•Ç ‡§∏‡§ø‡§∞‡•ç‡§ú‡§®‡§æ</li>
                    </ul>
                  </div>

                  <div class="future-tech">
                    <h4>üöÄ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§ï‡§æ ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§™‡•ç‡§∞‡§µ‡§ø‡§ß‡§ø‡§π‡§∞‡•Ç:</h4>
                    <ul>
                      <li>‡§≠‡§∞‡•ç‡§ö‡•Å‡§Ö‡§≤ ‡§∞‡§ø‡§Ø‡§æ‡§≤‡§ø‡§ü‡•Ä (VR) ‡§π‡•á‡§°‡§∏‡•á‡§ü</li>
                      <li>‡§∏‡§Ç‡§µ‡§∞‡•ç‡§ß‡§ø‡§§ ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï‡§§‡§æ (AR) ‡§°‡§ø‡§∏‡•ç‡§™‡•ç‡§≤‡•á</li>
                      <li>‡§π‡•ã‡§≤‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡§ø‡§ï ‡§™‡•ç‡§∞‡§ï‡•ç‡§∑‡•á‡§™‡§£</li>
                      <li>‡§π‡•ç‡§Ø‡§æ‡§™‡•ç‡§ü‡§ø‡§ï ‡§´‡§ø‡§°‡§¨‡•ç‡§Ø‡§æ‡§ï ‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡§π‡§∞‡•Ç</li>
                    </ul>
                  </div>
                `
              }
            ]
          }
        ]
      },
      grade10: {
        title: "‡§ï‡§ï‡•ç‡§∑‡§æ ‡•ß‡•¶ ‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞ ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§®",
        topics: [
          {
            id: "programming",
            title: "üíª ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ‡§ø‡§ô‡§ï‡•ã ‡§™‡§∞‡§ø‡§ö‡§Ø",
            icon: "üêç",
            lessons: [
              {
                id: "what-is-programming",
                title: "‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ‡§ø‡§ô ‡§ï‡•á ‡§π‡•ã?",
                content: `
                  <h2>‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ‡§ø‡§ô ‡§ï‡•á ‡§π‡•ã? üë®‚Äçüíª</h2>
                  <p>‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ‡§ø‡§ô ‡§≠‡§®‡•á‡§ï‡•ã ‡§ï‡§Æ‡•ç‡§™‡•ç‡§Ø‡•Å‡§ü‡§∞‡§ï‡§æ ‡§≤‡§æ‡§ó‡§ø ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§π‡§∞‡•Ç ‡§∏‡§Æ‡•ç‡§™‡§æ‡§¶‡§® ‡§ó‡§∞‡•ç‡§® ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡§®‡§π‡§∞‡•Ç ‡§∏‡§ø‡§∞‡•ç‡§ú‡§®‡§æ ‡§ó‡§∞‡•ç‡§®‡•á ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§π‡•ã‡•§</p>

                  <h3>‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Ö‡§µ‡§ß‡§æ‡§∞‡§£‡§æ‡§π‡§∞‡•Ç:</h3>
                  <ul>
                    <li><strong>‡§è‡§≤‡•ç‡§ó‡•ã‡§∞‡§ø‡§¶‡§Æ:</strong> ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§ï‡•ã ‡§ö‡§∞‡§£‡§¨‡§¶‡•ç‡§ß ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®</li>
                    <li><strong>‡§ï‡•ã‡§°:</strong> ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ‡§ø‡§ô ‡§≠‡§æ‡§∑‡§æ‡§Æ‡§æ ‡§≤‡•á‡§ñ‡§ø‡§è‡§ï‡§æ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡§®‡§π‡§∞‡•Ç</li>
                    <li><strong>‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ:</strong> ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡§®‡§π‡§∞‡•Ç‡§ï‡•ã ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∏‡•á‡§ü</li>
                    <li><strong>‡§¨‡§ó:</strong> ‡§ï‡•ã‡§°‡§Æ‡§æ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø</li>
                    <li><strong>‡§°‡§ø‡§¨‡§ó:</strong> ‡§¨‡§ó‡§π‡§∞‡•Ç ‡§´‡•á‡§≤‡§æ ‡§™‡§æ‡§∞‡•á‡§∞ ‡§∏‡•Å‡§ß‡§æ‡§∞‡•ç‡§®‡•á ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ</li>
                  </ul>

                  <h3>‡§≤‡•ã‡§ï‡§™‡•ç‡§∞‡§ø‡§Ø ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ‡§ø‡§ô ‡§≠‡§æ‡§∑‡§æ‡§π‡§∞‡•Ç:</h3>
                  
                  <div class="language-grid">
                    <div class="language">
                      <h4>üêç Python</h4>
                      <p>‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§‡•Ä‡§π‡§∞‡•Ç‡§ï‡§æ ‡§≤‡§æ‡§ó‡§ø ‡§∞‡§æ‡§Æ‡•ç‡§∞‡•ã, AI ‡§∞ ‡§µ‡•á‡§¨ ‡§°‡•á‡§≠‡§≤‡§™‡§Æ‡•á‡§®‡•ç‡§ü‡§Æ‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó</p>
                    </div>
                    
                    <div class="language">
                      <h4>‚òï Java</h4>
                      <p>‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü-‡§ì‡§∞‡§ø‡§è‡§®‡•ç‡§ü‡•á‡§°, ‡§è‡§®‡•ç‡§ü‡§∞‡§™‡•ç‡§∞‡§æ‡§á‡§ú ‡§è‡§™‡•ç‡§≤‡§ø‡§ï‡•á‡§∏‡§®‡§π‡§∞‡•Ç‡§Æ‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó</p>
                    </div>
                    
                    <div class="language">
                      <h4>üåê JavaScript</h4>
                      <p>‡§µ‡•á‡§¨ ‡§°‡•á‡§≠‡§≤‡§™‡§Æ‡•á‡§®‡•ç‡§ü ‡§∞ ‡§Ö‡§®‡•ç‡§§‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§ï‡§æ ‡§≤‡§æ‡§ó‡§ø ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï</p>
                    </div>
                    
                    <div class="language">
                      <h4>‚ö° C++</h4>
                      <p>‡§õ‡§ø‡§ü‡•ã ‡§∞ ‡§∂‡§ï‡•ç‡§§‡§ø‡§∂‡§æ‡§≤‡•Ä, ‡§ñ‡•á‡§≤ ‡§∞ ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ‡§π‡§∞‡•Ç‡§Æ‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó</p>
                    </div>
                  </div>

                  <h3>‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ‡§ø‡§ô ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ:</h3>
                  <ol>
                    <li><strong>‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£:</strong> ‡§ï‡•á ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§ó‡§∞‡•ç‡§®‡•Å‡§™‡§∞‡•ç‡§õ ‡§¨‡•Å‡§ù‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
                    <li><strong>‡§è‡§≤‡•ç‡§ó‡•ã‡§∞‡§ø‡§¶‡§Æ ‡§°‡§ø‡§ú‡§æ‡§á‡§®:</strong> ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®‡§ï‡§æ ‡§ö‡§∞‡§£‡§π‡§∞‡•Ç‡§ï‡•ã ‡§Ø‡•ã‡§ú‡§®‡§æ</li>
                    <li><strong>‡§ï‡•ã‡§°‡§ø‡§ô:</strong> ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§≤‡•á‡§ñ‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
                    <li><strong>‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£:</strong> ‡§Ø‡•ã ‡§∏‡§π‡•Ä ‡§§‡§∞‡§ø‡§ï‡§æ‡§≤‡•á ‡§ï‡§æ‡§Æ ‡§ó‡§∞‡•ç‡§õ ‡§ï‡§ø ‡§ú‡§æ‡§Å‡§ö ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
                    <li><strong>‡§°‡§ø‡§¨‡§ó‡§ø‡§ô:</strong> ‡§ï‡•Å‡§®‡•à ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡§π‡§∞‡•Ç ‡§†‡•Ä‡§ï ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
                    <li><strong>‡§™‡•ç‡§∞‡§≤‡•á‡§ñ‡§®:</strong> ‡§Ø‡•ã ‡§ï‡§∏‡§∞‡•Ä ‡§ï‡§æ‡§Æ ‡§ó‡§∞‡•ç‡§õ ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
                  </ol>

                  <div class="code-example">
                    <h4>üéØ ‡§∏‡§∞‡§≤ Python ‡§â‡§¶‡§æ‡§π‡§∞‡§£:</h4>
                    <pre><code>
# ‡§Ø‡•ã ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ‡§≤‡•á ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ‡§≤‡§æ‡§à ‡§Ö‡§≠‡§ø‡§µ‡§æ‡§¶‡§® ‡§ó‡§∞‡•ç‡§õ
naam = input("‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§®‡§æ‡§Æ ‡§ï‡•á ‡§π‡•ã? ")
print(f"‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞, {naam}! ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ‡§ø‡§ô‡§Æ‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§õ!")
                    </code></pre>
                  </div>
                `
              },
              {
                id: "algorithms",
                title: "‡§è‡§≤‡•ç‡§ó‡•ã‡§∞‡§ø‡§¶‡§Æ ‡§∞ ‡§´‡•ç‡§≤‡•ã‡§ö‡§æ‡§∞‡•ç‡§ü",
                content: `
                  <h2>‡§è‡§≤‡•ç‡§ó‡•ã‡§∞‡§ø‡§¶‡§Æ ‡§∞ ‡§´‡•ç‡§≤‡•ã‡§ö‡§æ‡§∞‡•ç‡§ü üìä</h2>
                  <p>‡§è‡§≤‡•ç‡§ó‡•ã‡§∞‡§ø‡§¶‡§Æ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®‡§ï‡•ã ‡§ö‡§∞‡§£‡§¨‡§¶‡•ç‡§ß ‡§µ‡§ø‡§ß‡§ø ‡§π‡•ã‡•§ ‡§´‡•ç‡§≤‡•ã‡§ö‡§æ‡§∞‡•ç‡§ü‡§≤‡•á ‡§Ø‡•Ä ‡§ö‡§∞‡§£‡§π‡§∞‡•Ç‡§≤‡§æ‡§à ‡§¶‡•É‡§∂‡•ç‡§Ø ‡§∞‡•Ç‡§™ ‡§¶‡§ø‡§®‡•ç‡§õ‡•§</p>

                  <h3>‡§è‡§≤‡•ç‡§ó‡•ã‡§∞‡§ø‡§¶‡§Æ ‡§ï‡•á ‡§π‡•ã?</h3>
                  <ul>
                    <li>‡§∞‡§æ‡§Æ‡•ç‡§∞‡§∞‡•Ä ‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§ø‡§§ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡§®‡§π‡§∞‡•Ç‡§ï‡•ã ‡§∏‡•Ä‡§Æ‡§ø‡§§ ‡§ï‡•ç‡§∞‡§Æ</li>
                    <li>‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§ó‡§∞‡•ç‡§õ</li>
                    <li>‡§∏‡•Ä‡§Æ‡§ø‡§§ ‡§ö‡§∞‡§£‡§π‡§∞‡•Ç‡§Æ‡§æ ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ</li>
                    <li>‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∞ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§ï‡§æ‡§∞‡•Ä ‡§π‡•Å‡§®‡•Å‡§™‡§∞‡•ç‡§õ</li>
                  </ul>

                  <h3>‡§è‡§≤‡•ç‡§ó‡•ã‡§∞‡§ø‡§¶‡§Æ ‡§â‡§¶‡§æ‡§π‡§∞‡§£ - ‡§ö‡§ø‡§Ø‡§æ ‡§¨‡§®‡§æ‡§â‡§®‡•á:</h3>
                  <ol>
                    <li>‡§ï‡•á‡§§‡§≤‡•Ä‡§Æ‡§æ ‡§™‡§æ‡§®‡•Ä ‡§â‡§Æ‡§æ‡§≤‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
                    <li>‡§ö‡§ø‡§Ø‡§æ‡§™‡§æ‡§§‡§Æ‡§æ ‡§ö‡§ø‡§Ø‡§æ ‡§™‡§æ‡§§ ‡§π‡§æ‡§≤‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
                    <li>‡§ö‡§ø‡§Ø‡§æ ‡§™‡§æ‡§§‡§Æ‡§æ ‡§§‡§æ‡§§‡•ã ‡§™‡§æ‡§®‡•Ä ‡§π‡§æ‡§≤‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
                    <li>‡•©-‡•´ ‡§Æ‡§ø‡§®‡•á‡§ü ‡§≠‡§ø‡§ú‡§æ‡§â‡§® ‡§¶‡§ø‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
                    <li>‡§ö‡§ø‡§Ø‡§æ‡§≤‡§æ‡§à ‡§ï‡§™‡§Æ‡§æ ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
                    <li>‡§ö‡§æ‡§π‡§ø‡§è‡§Æ‡§æ ‡§ö‡§ø‡§®‡•Ä/‡§¶‡•Ç‡§ß ‡§•‡§™‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
                    <li>‡§§‡§æ‡§§‡•à ‡§∏‡§∞‡•ç‡§≠ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
                  </ol>

                  <h3>‡§´‡•ç‡§≤‡•ã‡§ö‡§æ‡§∞‡•ç‡§ü ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡§π‡§∞‡•Ç:</h3>
                  
                  <div class="symbol-grid">
                    <div class="symbol">
                      <h4>üîµ ‡§Ö‡§Ç‡§°‡§æ‡§ï‡§æ‡§∞</h4>
                      <p>‡§∏‡•Å‡§∞‡•Å/‡§Ö‡§®‡•ç‡§§‡•ç‡§Ø</p>
                    </div>
                    
                    <div class="symbol">
                      <h4>üì¶ ‡§Ü‡§Ø‡§§</h4>
                      <p>‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ/‡§ï‡§æ‡§∞‡•ç‡§Ø</p>
                    </div>
                    
                    <div class="symbol">
                      <h4>üíé ‡§π‡•Ä‡§∞‡§æ</h4>
                      <p>‡§®‡§ø‡§∞‡•ç‡§£‡§Ø</p>
                    </div>
                    
                    <div class="symbol">
                      <h4>üì• ‡§∏‡§Æ‡§æ‡§®‡§æ‡§®‡•ç‡§§‡§∞ ‡§ö‡§§‡•Å‡§∞‡•ç‡§≠‡•Å‡§ú</h4>
                      <p>‡§á‡§®‡§™‡•Å‡§ü/‡§Ü‡§â‡§ü‡§™‡•Å‡§ü</p>
                    </div>
                  </div>

                  <h3>‡§¶‡•Å‡§à ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§ï‡•ã ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡§´‡•á‡§≤‡§æ ‡§™‡§æ‡§∞‡•ç‡§®‡•á ‡§è‡§≤‡•ç‡§ó‡•ã‡§∞‡§ø‡§¶‡§Æ:</h3>
                  <ol>
                    <li>‡§∏‡•Å‡§∞‡•Å</li>
                    <li>‡§™‡§π‡§ø‡§≤‡•ã ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ (A) ‡§á‡§®‡§™‡•Å‡§ü ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
                    <li>‡§¶‡•ã‡§∏‡•ç‡§∞‡•ã ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ (B) ‡§á‡§®‡§™‡•Å‡§ü ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
                    <li>‡§Ø‡§¶‡§ø A > B ‡§≠‡§®‡•á, Max = A</li>
                    <li>‡§®‡§§‡•ç‡§∞ Max = B</li>
                    <li>Max ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</li>
                    <li>‡§Ö‡§®‡•ç‡§§‡•ç‡§Ø</li>
                  </ol>

                  <div class="practice-box">
                    <h4>üéØ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ:</h4>
                    <p>‡§Ø‡§∏‡§ï‡§æ ‡§≤‡§æ‡§ó‡§ø ‡§è‡§≤‡•ç‡§ó‡•ã‡§∞‡§ø‡§¶‡§Æ ‡§∞ ‡§´‡•ç‡§≤‡•ã‡§ö‡§æ‡§∞‡•ç‡§ü ‡§¨‡§®‡§æ‡§â‡§® ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç:</p>
                    <ul>
                      <li>‡§Ü‡§Ø‡§§‡§ï‡•ã ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§´‡§≤ ‡§ó‡§£‡§®‡§æ ‡§ó‡§∞‡•ç‡§®‡•á</li>
                      <li>‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§∏‡§Æ ‡§µ‡§æ ‡§¨‡§ø‡§∑‡§Æ ‡§ú‡§æ‡§Å‡§ö ‡§ó‡§∞‡•ç‡§®‡•á</li>
                      <li>‡§§‡•Ä‡§® ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§ï‡•ã ‡§∏‡§¨‡•à‡§≠‡§®‡•ç‡§¶‡§æ ‡§†‡•Ç‡§≤‡•ã ‡§´‡•á‡§≤‡§æ ‡§™‡§æ‡§∞‡•ç‡§®‡•á</li>
                    </ul>
                  </div>
                `
              }
            ]
          }
        ]
      }
    }
  }
};

function App() {
  const [language, setLanguage] = useState('en');
  const [darkMode, setDarkMode] = useState(false);
  const [currentGrade, setCurrentGrade] = useState(null);
  const [currentTopic, setCurrentTopic] = useState(null);
  const [currentLesson, setCurrentLesson] = useState(null);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [visitedLessons, setVisitedLessons] = useState(() => {
    const saved = localStorage.getItem('visitedLessons');
    return saved ? JSON.parse(saved) : [];
  });
  const [showOfflineSettings, setShowOfflineSettings] = useState(false);

  // Service Worker integration
  const { 
    isServiceWorkerReady, 
    isServiceWorkerUpdated, 
    cacheSize, 
    updateServiceWorker,
    updateCacheSize,
    clearCache 
  } = useServiceWorker();

  // Force re-render when language changes
  const [, forceUpdate] = useState({});
  
  const content = SAMPLE_CONTENT[language] || SAMPLE_CONTENT.en;
  
  // Debug logging
  console.log('Current language:', language);
  console.log('Available languages:', Object.keys(SAMPLE_CONTENT));
  console.log('Content site name:', content.siteName);

  useEffect(() => {
    localStorage.setItem('visitedLessons', JSON.stringify(visitedLessons));
  }, [visitedLessons]);

  useEffect(() => {
    if (currentLesson) {
      const lessonId = `${currentGrade}-${currentTopic}-${currentLesson}`;
      if (!visitedLessons.includes(lessonId)) {
        setVisitedLessons([...visitedLessons, lessonId]);
      }
    }
  }, [currentLesson, currentGrade, currentTopic, visitedLessons]);

  // Force re-render when language changes
  useEffect(() => {
    forceUpdate({});
  }, [language]);

  const handleLanguageChange = (newLanguage) => {
    console.log('Changing language to:', newLanguage);
    setLanguage(newLanguage);
    // Force component re-render
    setTimeout(() => forceUpdate({}), 10);
  };

  const getCurrentLessonData = () => {
    if (!currentGrade || !currentTopic || !currentLesson) return null;
    const grade = content.grades[currentGrade];
    const topic = grade?.topics.find(t => t.id === currentTopic);
    const lesson = topic?.lessons.find(l => l.id === currentLesson);
    return { grade, topic, lesson };
  };

  const navigateLesson = (direction) => {
    const { grade, topic } = getCurrentLessonData();
    if (!grade || !topic) return;

    const currentLessonIndex = topic.lessons.findIndex(l => l.id === currentLesson);
    if (direction === 'next' && currentLessonIndex < topic.lessons.length - 1) {
      setCurrentLesson(topic.lessons[currentLessonIndex + 1].id);
    } else if (direction === 'prev' && currentLessonIndex > 0) {
      setCurrentLesson(topic.lessons[currentLessonIndex - 1].id);
    }
  };

  const downloadPDF = () => {
    const { lesson } = getCurrentLessonData();
    if (!lesson) return;
    
    // Simple PDF generation (in real implementation, use jsPDF or similar)
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
      <html>
        <head>
          <title>${lesson.title}</title>
          <meta charset="UTF-8">
        </head>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; padding: 20px;">
          <h1>${lesson.title}</h1>
          ${lesson.content}
        </body>
      </html>
    `);
    printWindow.document.close();
    printWindow.print();
  };

  if (!currentGrade) {
    return (
      <div className={`min-h-screen transition-colors duration-300 ${darkMode ? 'dark bg-gray-900' : 'bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50'}`}>
        {/* Offline Indicator */}
        <OfflineIndicator />
        
        {/* Service Worker Update Banner */}
        {isServiceWorkerUpdated && (
          <div className="fixed top-0 left-0 right-0 z-50 bg-blue-500 text-white px-4 py-3 text-center">
            <div className="flex items-center justify-center space-x-4">
              <span>A new version is available!</span>
              <button
                onClick={updateServiceWorker}
                className="bg-white text-blue-500 px-3 py-1 rounded text-sm font-medium hover:bg-gray-100 transition-colors"
              >
                Update Now
              </button>
            </div>
          </div>
        )}

        {/* Header */}
        <header className={`sticky top-0 z-50 transition-colors duration-300 ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white/80 border-blue-100'} backdrop-blur-md border-b`}>
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex items-center justify-between h-16">
              <div className="flex items-center space-x-2">
                <div className="text-2xl">üìö</div>
                <h1 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                  {content.siteName}
                </h1>
                {/* Offline Status Indicator */}
                {isServiceWorkerReady && (
                  <div className="flex items-center space-x-1">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                      Offline Ready
                    </span>
                  </div>
                )}
              </div>
              
              <div className="flex items-center space-x-4">
                {/* Offline Settings Button */}
                <button
                  onClick={() => setShowOfflineSettings(!showOfflineSettings)}
                  className={`p-2 rounded-lg transition-colors ${darkMode ? 'bg-gray-700 text-gray-400 hover:text-gray-300' : 'bg-gray-100 text-gray-600 hover:text-gray-700'}`}
                  title="Offline Settings"
                >
                  ‚öôÔ∏è
                </button>

                {/* Language Toggle */}
                <div className="flex items-center space-x-1 bg-gray-100 dark:bg-gray-700 rounded-lg p-1">
                  <button
                    onClick={() => handleLanguageChange('en')}
                    className={`px-3 py-1 rounded text-sm font-medium transition-colors ${language === 'en' ? 'bg-blue-500 text-white' : 'text-gray-600 dark:text-gray-300'}`}
                  >
                    EN
                  </button>
                  <button
                    onClick={() => handleLanguageChange('np')}
                    className={`px-3 py-1 rounded text-sm font-medium transition-colors ${language === 'np' ? 'bg-blue-500 text-white' : 'text-gray-600 dark:text-gray-300'}`}
                  >
                    ‡§®‡•á‡§™‡§æ‡§≤‡•Ä
                  </button>
                </div>

                {/* Dark Mode Toggle */}
                <button
                  onClick={() => setDarkMode(!darkMode)}
                  className={`p-2 rounded-lg transition-colors ${darkMode ? 'bg-gray-700 text-yellow-400' : 'bg-gray-100 text-gray-600'}`}
                >
                  {darkMode ? content.lightMode : content.darkMode}
                </button>
              </div>
            </div>
            
            {/* Offline Settings Panel */}
            {showOfflineSettings && (
              <div className={`absolute top-full left-0 right-0 ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border-t shadow-lg p-4`}>
                <div className="max-w-7xl mx-auto">
                  <h3 className={`text-lg font-semibold mb-3 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                    Offline Settings
                  </h3>
                  <div className="grid md:grid-cols-3 gap-4">
                    <div className={`p-3 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-gray-50'}`}>
                      <div className="flex items-center space-x-2 mb-2">
                        <span className="text-green-500">‚úì</span>
                        <span className={`text-sm font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                          App Status
                        </span>
                      </div>
                      <p className={`text-xs ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                        {isServiceWorkerReady ? 'Ready for offline use' : 'Setting up offline mode...'}
                      </p>
                    </div>
                    
                    <div className={`p-3 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-gray-50'}`}>
                      <div className="flex items-center space-x-2 mb-2">
                        <span className="text-blue-500">üíæ</span>
                        <span className={`text-sm font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                          Cache Size
                        </span>
                      </div>
                      <p className={`text-xs ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                        {cacheSize}
                      </p>
                      <div className="flex space-x-2 mt-2">
                        <button
                          onClick={updateCacheSize}
                          className="text-xs px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
                        >
                          Refresh
                        </button>
                        <button
                          onClick={clearCache}
                          className="text-xs px-2 py-1 bg-red-500 text-white rounded hover:bg-red-600 transition-colors"
                        >
                          Clear
                        </button>
                      </div>
                    </div>
                    
                    <div className={`p-3 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-gray-50'}`}>
                      <div className="flex items-center space-x-2 mb-2">
                        <span className="text-purple-500">üì±</span>
                        <span className={`text-sm font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                          Install App
                        </span>
                      </div>
                      <p className={`text-xs ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                        Install for the best offline experience
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </header>

        {/* Hero Section */}
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          <div className="text-center mb-12">
            <div className="mb-8">
              <img 
                src="images/front.png" 
                alt="Students learning programming"
                className="mx-auto w-full max-w-md rounded-2xl shadow-2xl"
              />
            </div>
            <h2 className={`text-4xl md:text-6xl font-bold mb-4 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
              {content.subtitle}
            </h2>
            <p className={`text-xl md:text-2xl mb-8 ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
              {content.tagline}
            </p>
            
            {/* Grade Selection Cards */}
            <div className="grid md:grid-cols-2 gap-8 max-w-4xl mx-auto">
              <div 
                onClick={() => setCurrentGrade('grade9')}
                className={`cursor-pointer group transition-all duration-300 transform hover:scale-105 ${darkMode ? 'bg-gray-800 hover:bg-gray-700' : 'bg-white hover:bg-blue-50'} rounded-2xl p-8 shadow-xl hover:shadow-2xl border ${darkMode ? 'border-gray-700' : 'border-blue-100'}`}
              >
                <div className="text-6xl mb-4">üéØ</div>
                <h3 className={`text-2xl font-bold mb-2 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                  {content.startGrade9}
                </h3>
                <p className={`${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                  Computer Basics & Fundamentals
                </p>
              </div>

              <div 
                onClick={() => setCurrentGrade('grade10')}
                className={`cursor-pointer group transition-all duration-300 transform hover:scale-105 ${darkMode ? 'bg-gray-800 hover:bg-gray-700' : 'bg-white hover:bg-blue-50'} rounded-2xl p-8 shadow-xl hover:shadow-2xl border ${darkMode ? 'border-gray-700' : 'border-blue-100'}`}
              >
                <div className="text-6xl mb-4">üöÄ</div>
                <h3 className={`text-2xl font-bold mb-2 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                  {content.startGrade10}
                </h3>
                <p className={`${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                  Programming & Advanced Concepts
                </p>
              </div>
            </div>
          </div>

          {/* Features Section */}
          <div className="grid md:grid-cols-3 gap-8 mt-16">
            <div className={`text-center p-6 rounded-2xl ${darkMode ? 'bg-gray-800' : 'bg-white'} shadow-lg`}>
              <div className="text-4xl mb-4">üåç</div>
              <h3 className={`text-xl font-bold mb-2 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                Multilingual
              </h3>
              <p className={`${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                Learn in English or Nepali
              </p>
            </div>

            <div className={`text-center p-6 rounded-2xl ${darkMode ? 'bg-gray-800' : 'bg-white'} shadow-lg`}>
              <div className="text-4xl mb-4">üì±</div>
              <h3 className={`text-xl font-bold mb-2 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                Mobile Friendly
              </h3>
              <p className={`${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                Works perfectly on all devices
              </p>
            </div>

            <div className={`text-center p-6 rounded-2xl ${darkMode ? 'bg-gray-800' : 'bg-white'} shadow-lg`}>
              <div className="text-4xl mb-4">üÜì</div>
              <h3 className={`text-xl font-bold mb-2 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                Completely Free
              </h3>
              <p className={`${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                No signup required
              </p>
            </div>
          </div>
        </main>
      </div>
    );
  }

  const currentLessonData = getCurrentLessonData();
  const gradeData = content.grades[currentGrade];

  return (
    <div className={`min-h-screen transition-colors duration-300 ${darkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>
      {/* Header */}
      <header className={`sticky top-0 z-50 transition-colors duration-300 ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border-b`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setSidebarOpen(!sidebarOpen)}
                className={`md:hidden p-2 rounded-lg ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-100'}`}
              >
                ‚ò∞
              </button>
              
              <div 
                onClick={() => setCurrentGrade(null)}
                className="flex items-center space-x-2 cursor-pointer"
              >
                <div className="text-2xl">üìö</div>
                <h1 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                  {content.siteName}
                </h1>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              {/* Search */}
              <div className="hidden sm:block">
                <input
                  type="text"
                  placeholder={content.search}
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className={`px-4 py-2 rounded-lg border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'} focus:outline-none focus:ring-2 focus:ring-blue-500`}
                />
              </div>

              {/* Language Toggle */}
              <div className="flex items-center space-x-1 bg-gray-100 dark:bg-gray-700 rounded-lg p-1">
                <button
                  onClick={() => handleLanguageChange('en')}
                  className={`px-3 py-1 rounded text-sm font-medium transition-colors ${language === 'en' ? 'bg-blue-500 text-white' : 'text-gray-600 dark:text-gray-300'}`}
                >
                  EN
                </button>
                <button
                  onClick={() => handleLanguageChange('np')}
                  className={`px-3 py-1 rounded text-sm font-medium transition-colors ${language === 'np' ? 'bg-blue-500 text-white' : 'text-gray-600 dark:text-gray-300'}`}
                >
                  ‡§®‡•á‡§™‡§æ‡§≤‡•Ä
                </button>
              </div>

              {/* Dark Mode Toggle */}
              <button
                onClick={() => setDarkMode(!darkMode)}
                className={`p-2 rounded-lg transition-colors ${darkMode ? 'bg-gray-700 text-yellow-400' : 'bg-gray-100 text-gray-600'}`}
              >
                {darkMode ? content.lightMode : content.darkMode}
              </button>
            </div>
          </div>
        </div>
      </header>

      <div className="flex">
        {/* Sidebar */}
        <aside className={`${sidebarOpen ? 'translate-x-0' : '-translate-x-full'} md:translate-x-0 fixed md:static inset-y-0 left-0 z-40 w-80 transition-transform duration-300 ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border-r overflow-y-auto`}>
          <div className="p-6">
            <h2 className={`text-xl font-bold mb-6 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
              {gradeData.title}
            </h2>
            
            {gradeData.topics.map(topic => (
              <div key={topic.id} className="mb-6">
                <h3 
                  onClick={() => setCurrentTopic(currentTopic === topic.id ? null : topic.id)}
                  className={`flex items-center justify-between cursor-pointer font-semibold text-lg mb-3 p-3 rounded-lg transition-colors ${darkMode ? 'text-white hover:bg-gray-700' : 'text-gray-900 hover:bg-gray-50'}`}
                >
                  <span className="flex items-center space-x-2">
                    <span className="text-xl">{topic.icon}</span>
                    <span>{topic.title}</span>
                  </span>
                  <span className={`transform transition-transform ${currentTopic === topic.id ? 'rotate-90' : ''}`}>
                    ‚ñ∂
                  </span>
                </h3>
                
                {currentTopic === topic.id && (
                  <div className="ml-4 space-y-2">
                    {topic.lessons.map(lesson => {
                      const lessonId = `${currentGrade}-${topic.id}-${lesson.id}`;
                      const isVisited = visitedLessons.includes(lessonId);
                      const isActive = currentLesson === lesson.id;
                      
                      return (
                        <button
                          key={lesson.id}
                          onClick={() => setCurrentLesson(lesson.id)}
                          className={`w-full text-left p-3 rounded-lg transition-colors flex items-center space-x-2 ${
                            isActive 
                              ? 'bg-blue-500 text-white' 
                              : darkMode 
                                ? 'text-gray-300 hover:bg-gray-700' 
                                : 'text-gray-700 hover:bg-gray-100'
                          }`}
                        >
                          <span className={`w-2 h-2 rounded-full ${isVisited ? 'bg-green-500' : 'bg-gray-400'}`}></span>
                          <span>{lesson.title}</span>
                        </button>
                      );
                    })}
                  </div>
                )}
              </div>
            ))}
          </div>
        </aside>

        {/* Main Content */}
        <main className="flex-1 min-h-screen">
          {currentLessonData?.lesson ? (
            <div className="max-w-4xl mx-auto p-6">
              {/* Lesson Header */}
              <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow-lg p-6 mb-6`}>
                <h1 className={`text-3xl font-bold mb-4 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                  {currentLessonData.lesson.title}
                </h1>
                <div className="flex flex-wrap items-center gap-4">
                  <span className={`px-3 py-1 rounded-full text-sm ${darkMode ? 'bg-blue-600 text-white' : 'bg-blue-100 text-blue-800'}`}>
                    {currentLessonData.topic.title}
                  </span>
                  <button
                    onClick={downloadPDF}
                    className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${darkMode ? 'bg-green-600 hover:bg-green-700 text-white' : 'bg-green-500 hover:bg-green-600 text-white'}`}
                  >
                    {content.downloadPdf}
                  </button>
                </div>
              </div>

              {/* Lesson Content */}
              <div className={`${darkMode ? 'bg-gray-800 text-gray-100' : 'bg-white text-gray-900'} rounded-lg shadow-lg p-8 mb-6 lesson-content`}>
                <div dangerouslySetInnerHTML={{ __html: currentLessonData.lesson.content }} />
              </div>

              {/* Navigation */}
              <div className="flex justify-between items-center">
                <button
                  onClick={() => navigateLesson('prev')}
                  className={`px-6 py-3 rounded-lg font-medium transition-colors ${darkMode ? 'bg-gray-700 hover:bg-gray-600 text-white' : 'bg-gray-200 hover:bg-gray-300 text-gray-800'}`}
                >
                  {content.previous}
                </button>
                
                <button
                  onClick={() => navigateLesson('next')}
                  className="px-6 py-3 bg-blue-500 hover:bg-blue-600 text-white rounded-lg font-medium transition-colors"
                >
                  {content.next}
                </button>
              </div>
            </div>
          ) : (
            <div className="flex items-center justify-center h-full">
              <div className="text-center">
                <div className="text-6xl mb-4">üìñ</div>
                <h2 className={`text-2xl font-bold mb-2 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                  Select a Lesson
                </h2>
                <p className={`${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                  Choose a topic and lesson from the sidebar to get started
                </p>
              </div>
            </div>
          )}
        </main>
      </div>

      {/* Mobile Sidebar Overlay */}
      {sidebarOpen && (
        <div 
          className="md:hidden fixed inset-0 bg-black bg-opacity-50 z-30"
          onClick={() => setSidebarOpen(false)}
        ></div>
      )}
    </div>
  );
}

export default App;